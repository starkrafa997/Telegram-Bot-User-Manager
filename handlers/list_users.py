import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from database.queries import get_all_users

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_button(message: Message):
    await list_users(message)


# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
@router.message(Command('list'))
async def list_users(message: Message):
    try:
        users = get_all_users()
        if not users:
            await message.answer('–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ.')
        else:
            text = '\n'.join([f"üë§ {name}, {age} –ª–µ—Ç" for name, age in users])
            await message.answer(f'<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{text}', parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}.')
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")