import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from keyboards.menu import main_menu
from states.user_states import AddUserState, UpdateUserState

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    logging.info(f'/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}')

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —á–µ–≥–æ-—Ç–æ)
    await state.clear()
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ üëá',
        parse_mode=ParseMode.HTML, reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∞" –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM
@router.message(UpdateUserState.waiting_for_new_age, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(AddUserState.waiting_age, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(AddUserState.waiting_name_1, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state:
        await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é!", reply_markup=main_menu)
    else:
        await message.answer("‚ùó –ù–µ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
