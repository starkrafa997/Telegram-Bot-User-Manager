import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.menu import main_menu
from keyboards.cancel import cancel_button
from database.queries import add_user, user_exists_by_id
from states.user_states import AddUserState

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@router.message(F.text == '‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
async def register_button(message: Message, state: FSMContext):
    await add_user_handler(message, state)


# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("add"))
async def add_user_handler(message: Message, state: FSMContext):
    logging.info(f'–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {message.from_user.id}')
    try:

        if user_exists_by_id(message.from_user.id):
            logging.warning(f'{message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
            await message.answer(
                '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /update, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.',
                reply_markup=main_menu)
            return

        await message.answer("üë§ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è", reply_markup=cancel_button)
        await state.set_state(AddUserState.waiting_name_1)

    except Exception as e:
        logging.exception(f'–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}.')
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(AddUserState.waiting_name_1)
async def get_name_1(message: Message, state: FSMContext):
    name = message.text
    logging.debug(f'{message.from_user.id} –≤–≤—ë–ª –∏–º—è {name}')
    await state.update_data(name=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=cancel_button)
    await state.set_state(AddUserState.waiting_age)


# –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
@router.message(AddUserState.waiting_age)
async def get_age(message: Message, state: FSMContext):
    age_input = message.text
    logging.debug(f'{message.from_user.id} –≤–≤—ë–ª –≤–æ–∑—Ä–∞—Å—Ç: {age_input}')
    try:
        if not message.text.isdigit():
            logging.warning(f'{message.from_user.id} –≤–≤—ë–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç {age_input}')
            await message.answer("‚ùó –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        age = int(message.text)
        if not (5 <= age <= 120):
            await message.answer("‚ùó –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 120 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        data = await state.get_data()
        name = data.get("name")
        add_user(message.from_user.id, name, age)
        await message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}, {age} –ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.', reply_markup=main_menu)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
        await state.clear()

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")